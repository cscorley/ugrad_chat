Two pieces of software are to be written: A client and a server.  Both of these programs will use a standard message packet between the two to create a chat room.  The chat room is to have a maximum of 50 clients, thus the server will have to echo messages sent to it from a client to all the other clients (or n-1 clients where n is the number of connected clients).  Any client attempting to connect when the server is full will receive an error message that the server is full and be disconnected.

The server is to quit on any input and a return, while the client will handle new inputted text as a message to be displayed to the chat and only quit when the message is "/exit".  Messages entered by the client over 249-nameLength characters long, where nameLength is the user's chosen handle length, will be ignored.  This will allow the server to echo out the same message with the user's name appended with whitespace to all the other clients so no truncation will need to occur.  Messages on the client's software /may/ be broken up into multiple messages if they exceed this length rather than being ignored.

The server has a capacity of 50 clients and a simple linked list will be best to manage this small list.  A linked list is chosen over an array due to clients connecting and disconnecting would create holes in the array that would have to be kept up with externally anyhow.  The linked list node will contain a pointer to the next node and a struct containing the clients information: IP address, user handle, and any other information which may be needed later.  This list will be checked for a name taken when a new client connects and if the name is already in use, the client will receive an error and disconnect.  The list will also be used to echo messages from clients to all other clients.

When the server receives a message, it will check the above list and extract the user's information from a lookup of the IP address.  Because I'm lazy, this will probably be a linear search of the list.  Once the user is found, a pointer is saved to the struct in the list and the message will then be echoed out to all other clients in the list, skipping the saved pointer position.

Mechanisms such as logging, displaying connections to console, verbose output and help will each be contained in separate functions for both the server and client.  They will all be proceeded by a simple if check to see if the option was turned on and then called if true and any additional if checks to determine if the message is destined for that particular function or not (ie, -l does not log actual dialog, just connections).  The functions will be passed a pointer to the struct containing the packet.  The help function itself will print out all relevant information and then exit the program.


Source files will be split between the client and server into two folders, one for each.  Each source will have a header and a implementation file each.

